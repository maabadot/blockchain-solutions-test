{"version":3,"sources":["components/layout/Navbar.jsx","components/layout/Footer.jsx","actions/types.js","components/portfolio/PortfolioCurrency.jsx","actions/balance.js","components/portfolio/PortfolioChart.jsx","components/portfolio/Portfolio.jsx","components/converter/ConverterChart.jsx","components/converter/ConverterForm.jsx","components/converter/Converter.jsx","reducers/quotation.js","reducers/balance.js","reducers/market.js","reducers/index.js","store.js","actions/market.js","App.js","actions/quotation.js","index.js"],"names":["Navbar","className","activeClassName","exact","to","Footer","GET_BALANCE","SET_BALANCE","GET_QUOTATIONS","GET_MARKET","connect","setBalance","currency","balance","dispatch","a","storageBalance","JSON","parse","localStorage","getItem","setItem","stringify","type","payload","useState","add","remove","formData","setFormData","onChange","e","target","name","value","placeholder","onClick","parseFloat","state","quotation","data","labels","datasets","label","USD","Math","round","BTC","ETH","backgroundColor","borderColor","borderWidth","width","height","options","maintainAspectRatio","getBalance","initialState","useEffect","loading","Object","entries","map","ConverterChart","prices","slice","price","date","Date","getUTCDate","getUTCMonth","fill","lineTension","borderCapStyle","borderDash","borderDashOffset","borderJoinStyle","pointBorderColor","pointBackgroundColor","pointBorderWidth","pointHoverRadius","pointHoverBackgroundColor","pointHoverBorderColor","pointHoverBorderWidth","pointRadius","pointHitRadius","floor","ConverterForm","from","input","output","onSelectChange","onInputChange","disabled","market","combineReducers","action","bitcoin","usd","ethereum","middleware","thunk","store","createStore","rootReducer","composeWithDevTools","applyMiddleware","currencies","App","axios","get","res","console","log","promiseArray","forEach","curr","push","Promise","all","then","values","err","basename","path","component","Converter","Portfolio","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.5f07434b.chunk.js","sourcesContent":["import React from 'react';\r\nimport { NavLink } from 'react-router-dom';\r\n\r\nconst Navbar = () => {\r\n    return (\r\n        <nav className=\"navbar\">\r\n            <div className=\"container\">\r\n                <ul className=\"pages\">\r\n                    <li>\r\n                        <NavLink activeClassName='selected' className='text-link' exact to='/'>Конвертер</NavLink>\r\n                    </li>\r\n                    <li>\r\n                        <NavLink activeClassName='selected' className='text-link' exact to='/portfolio'>Портфель</NavLink>\r\n                    </li>\r\n                </ul>\r\n                <div className=\"logo\">crypto.</div>\r\n            </div>\r\n        </nav>\r\n    );\r\n}\r\n\r\nexport default Navbar;\r\n","import React from 'react';\r\n\r\nconst Footer = () => {\r\n    return (\r\n        <footer>\r\n            <div className=\"container\">\r\n                <div>\r\n                    <i className=\"far fa-copyright\"></i> crypto.\r\n                </div>\r\n                <div>\r\n                    +7 (XXX) XXX-XX-XX\r\n                </div>\r\n            </div>\r\n        </footer>\r\n    );\r\n}\r\n\r\nexport default Footer;","export const GET_BALANCE = 'GET_BALANCE';\r\nexport const SET_BALANCE = 'SET_BALANCE';\r\nexport const GET_QUOTATIONS = 'GET_QUOTATIONS';\r\nexport const GET_MARKET = 'GET_MARKET';","import React, { useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { setBalance } from '../../actions/balance';\r\nimport { connect } from 'react-redux';\r\n\r\nconst PortfolioCurrency = ({ setBalance, currency, balance }) => {\r\n\r\n    const [formData, setFormData] = useState({\r\n       add: '',\r\n       remove: ''\r\n    });\r\n\r\n    const { add, remove } = formData;\r\n\r\n    const onChange = (e) => {\r\n        setFormData({\r\n            ...formData,\r\n            [e.target.name]: e.target.value\r\n        })\r\n    }\r\n\r\n    return (\r\n        <div className=\"currency-box\">\r\n            <div className=\"currency\">{balance}{currency}</div>\r\n            <div className=\"form-handler\">\r\n                <div className=\"\">\r\n                    <input name=\"add\" type=\"number\" placeholder=\"Заработал\" value={add} onChange={e => onChange(e)}/>\r\n                </div>\r\n                <button name=\"addBtn\" className=\"btn\" onClick={e => {\r\n                    if (add !== '')\r\n                        setBalance(currency, (balance + parseFloat(add)))}\r\n                }><i className=\"fas fa-plus fa-3x\"></i></button>\r\n            </div>\r\n            <div className=\"form-handler\">\r\n                <div className=\"\">\r\n                    <input name=\"remove\" type=\"number\" placeholder=\"Потратил\" value={remove} onChange={e => onChange(e)}/>\r\n                </div>\r\n                <button name=\"removeBtn\" className=\"btn\" onClick={e => {\r\n                    if (remove !== '')\r\n                        setBalance(currency, (balance - parseFloat(remove)))}\r\n                }><i className=\"fas fa-minus fa-3x\"></i></button>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nPortfolioCurrency.propTypes = {\r\n    setBalance: PropTypes.func.isRequired\r\n}\r\n\r\nexport default connect(null, { setBalance })(PortfolioCurrency);","import {\r\n    GET_BALANCE,\r\n    SET_BALANCE\r\n} from './types';\r\n\r\nexport const getBalance = () => async dispatch => {\r\n\r\n    const initialState = {\r\n        USD: 0,\r\n        BTC: 0,\r\n        ETH: 0\r\n    }\r\n\r\n    let balance = localStorage.getItem('balance');\r\n\r\n    if (balance == null) {\r\n        balance = initialState;\r\n        localStorage.setItem('balance', JSON.stringify(balance))\r\n    } else {\r\n        balance = JSON.parse(balance);\r\n    }\r\n\r\n    dispatch({\r\n        type: GET_BALANCE,\r\n        payload: balance\r\n    })\r\n}\r\n\r\nexport const setBalance = (currency, balance) => async dispatch => {\r\n    let storageBalance = JSON.parse(localStorage.getItem('balance'));\r\n    storageBalance[currency] = balance;\r\n    localStorage.setItem('balance', JSON.stringify(storageBalance));\r\n\r\n    dispatch({\r\n        type: SET_BALANCE,\r\n        payload: {\r\n            currency,\r\n            balance\r\n        }\r\n    })\r\n}","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { Pie } from \"react-chartjs-2\";\r\nimport {connect} from 'react-redux'\r\n\r\nconst PortfolioChart = ({ quotation, balance }) => {\r\n    const data = {\r\n        labels: ['US Dollar', 'Bitcoin USD Value', 'Ethereum USD Value'],\r\n        datasets: [\r\n            {\r\n                label: 'Portfolio',\r\n                data: [\r\n                    balance.USD,\r\n                    Math.round(balance.BTC * quotation.BTC * 100) / 100,\r\n                    Math.round(balance.ETH * quotation.ETH * 100) / 100\r\n                ],\r\n                backgroundColor: [\r\n                    'rgba(0, 0, 0, 1)',\r\n                    'rgba(204, 204, 204, 1)',\r\n                    'rgba(102, 102, 102, 1)'\r\n                ],\r\n                borderColor: [\r\n                    'rgba(255, 255, 255, 1)',\r\n                    'rgba(255, 255, 255, 1)',\r\n                    'rgba(255, 255, 255, 1)'\r\n                ],\r\n                borderWidth: 2,\r\n            },\r\n        ],\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <Pie data={data}\r\n                 width={700}\r\n                 height={350}\r\n                 options={{ maintainAspectRatio: false }}\r\n            />\r\n        </div>\r\n    );\r\n}\r\n\r\nPortfolioChart.propTypes = {\r\n    quotation: PropTypes.object.isRequired\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    quotation: state.quotation\r\n})\r\n\r\nexport default connect(mapStateToProps)(PortfolioChart);\r\n","import React, { Fragment, useEffect } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport PortfolioCurrency from './PortfolioCurrency';\r\nimport { getBalance } from '../../actions/balance';\r\nimport { connect } from 'react-redux';\r\nimport PortfolioChart from './PortfolioChart';\r\n\r\nconst Portfolio = ({ getBalance, quotation, balance: { balance } }) => {\r\n\r\n    useEffect(() => {\r\n        getBalance();\r\n    }, []);\r\n\r\n    return (\r\n        <Fragment>\r\n            <div className=\"container\">\r\n                <div className=\"content\">\r\n                    <div className=\"flex\">\r\n                        <div className=\"main-text xl\">\r\n                            Ваш портфель.\r\n                        </div>\r\n                        <div className=\"main-text m\">\r\n                            Баланс: {quotation.loading ? 'Загрузка...' : `${Math.round((balance.USD + \r\n                            (quotation.BTC * balance.BTC) + \r\n                            (quotation.ETH * balance.ETH)) * 100) / 100}USD`}\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"flex charts my-2\">\r\n                        {Object.entries(balance).map(currency => <PortfolioCurrency key={currency[0]} currency={currency[0]} balance={currency[1]}/>)}\r\n                    </div>\r\n                    {quotation.loading ? 'Загрузка...' :\r\n                        <PortfolioChart className=\"my-2\" balance={balance} quotation={quotation}/>\r\n                    }\r\n\r\n                </div>\r\n            </div>\r\n        </Fragment>\r\n    );\r\n}\r\n\r\nPortfolio.propTypes = {\r\n    getBalance: PropTypes.func.isRequired,\r\n    balance: PropTypes.object.isRequired,\r\n    quotation: PropTypes.object.isRequired\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n    quotation: state.quotation,\r\n    balance: state.balance\r\n})\r\n\r\n\r\nexport default connect(mapStateToProps, { getBalance })(Portfolio);","import React from 'react';\r\nimport { Line } from 'react-chartjs-2';\r\n\r\nconst ConverterChart = ({ currency, prices }) => {\r\n    const data = {\r\n        labels: [...prices.slice(0, 14).map(price => {\r\n            const date = new Date(price[0]);\r\n            return `${date.getUTCDate()}.${date.getUTCMonth() + 1}`\r\n        }), 'Сейчас'],\r\n        datasets: [\r\n            {\r\n                label: `USD value of ${currency}`,\r\n                fill: false,\r\n                lineTension: 0.1,\r\n                backgroundColor: 'rgba(0,0,0,0.4)',\r\n                borderColor: 'rgba(0,0,0,1)',\r\n                borderCapStyle: 'butt',\r\n                borderDash: [],\r\n                borderDashOffset: 0.0,\r\n                borderJoinStyle: 'miter',\r\n                pointBorderColor: 'rgba(0,0,0,1)',\r\n                pointBackgroundColor: '#fff',\r\n                pointBorderWidth: 1,\r\n                pointHoverRadius: 5,\r\n                pointHoverBackgroundColor: 'rgba(0,0,0,1)',\r\n                pointHoverBorderColor: 'rgba(220,220,220,1)',\r\n                pointHoverBorderWidth: 2,\r\n                pointRadius: 1,\r\n                pointHitRadius: 10,\r\n                data: prices.map(price => Math.floor(price[1] * 100) / 100)\r\n            }\r\n        ]\r\n    }\r\n\r\n    return (\r\n        <div className='chart'>\r\n            <Line data={data} \r\n                width={450}\r\n                height={300}\r\n                options={{ maintainAspectRatio: false }}\r\n            />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default ConverterChart;\r\n","import React, { useState, useEffect } from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\nfunction ConverterForm({ quotation }) {\r\n\r\n    const [formData, setFormData] = useState({\r\n        from: 'USD',\r\n        to: 'USD',\r\n        input: 1,\r\n        output: 1\r\n    });\r\n\r\n    const { from, to, input, output } = formData;\r\n\r\n    useEffect(() => {\r\n        setFormData({\r\n            ...formData,\r\n            output: input * quotation[from] / quotation[to]\r\n        })\r\n    }, [from, to, input])\r\n\r\n    const onSelectChange = (e) => {\r\n        setFormData({\r\n            ...formData,\r\n            [e.target.name]: e.target.value\r\n        })\r\n    }\r\n\r\n    const onInputChange = (e) => {\r\n        setFormData({\r\n            ...formData,\r\n            input: e.target.value\r\n        })\r\n    }\r\n\r\n    return (\r\n        <div className='converter'>\r\n            <div className='flex my-2 al-it-center'>\r\n                <select name='from' onChange={e => onSelectChange(e)}>\r\n                    <option value=\"USD\">USD</option>\r\n                    <option value=\"BTC\">BTC</option>\r\n                    <option value=\"ETH\">ETH</option>\r\n                </select>\r\n                <i className=\"fas fa-arrow-right fa-2x\"></i>\r\n                <select name='to' onChange={e => onSelectChange(e)}>\r\n                    <option value=\"USD\">USD</option>\r\n                    <option value=\"BTC\">BTC</option>\r\n                    <option value=\"ETH\">ETH</option>\r\n                </select>\r\n            </div>\r\n            <div className='flex my-2 al-it-center'>\r\n                <input type=\"number\" value={input} onChange={e => onInputChange(e)}/>\r\n                <i className=\"fas fa-arrow-right fa-2x\"></i>\r\n                <input type=\"number\" disabled value={output}/>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nConverterForm.propTypes = {\r\n    quotation: PropTypes.object.isRequired\r\n}\r\n\r\nexport default ConverterForm;\r\n\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { connect } from 'react-redux';\r\nimport ConverterChart from './ConverterChart';\r\nimport ConverterForm from './ConverterForm';\r\n\r\nconst Converter = ({ market, quotation }) => {\r\n    return (\r\n        <div className=\"container\">\r\n            <div className=\"content\">\r\n                <div className=\"flex\">\r\n                    <div className=\"main-text xl\">\r\n                        Конвертер.\r\n                    </div>\r\n                </div>\r\n\r\n                {(market.loading || quotation.loading) ? 'Загрузка...' : <div className='flex fd-column al-it-center'>\r\n                    <ConverterForm quotation={quotation}/>\r\n                    {Object.entries(market.prices).map(price => <ConverterChart key={price[0]} currency={price[0]} prices={price[1]}/>)}    \r\n                </div>}\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nConverter.propTypes = {\r\n    quotation: PropTypes.object.isRequired,\r\n    market: PropTypes.object.isRequired\r\n};\r\n\r\nconst mapStateToProps = state => ({\r\n    quotation: state.quotation,\r\n    market: state.market\r\n})\r\n\r\nexport default connect(mapStateToProps)(Converter);\r\n","import {GET_QUOTATIONS} from \"../actions/types\";\r\n\r\nconst initialState = {\r\n    BTC: null,\r\n    ETH: null,\r\n    USD: 1,\r\n    loading: true\r\n}\r\n\r\nexport default function (state = initialState, action) {\r\n    const {type, payload} = action;\r\n\r\n    switch (type) {\r\n        case GET_QUOTATIONS:\r\n            return {\r\n                BTC: payload.bitcoin.usd,\r\n                ETH: payload.ethereum.usd,\r\n                USD: 1,\r\n                loading: false\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n}","import {\r\n    GET_BALANCE,\r\n    SET_BALANCE\r\n} from '../actions/types';\r\n\r\nconst initialState = {\r\n    balance: {\r\n        USD: null,\r\n        BTC: null,\r\n        ETH: null\r\n    },\r\n    loading: true\r\n}\r\n\r\nexport default function (state = initialState, action) {\r\n    const {type, payload} = action;\r\n\r\n    switch (type) {\r\n        case GET_BALANCE:\r\n            return {\r\n                balance: payload,\r\n                loading: false\r\n            }\r\n        case SET_BALANCE:\r\n            return {\r\n                balance: {\r\n                    ...state.balance,\r\n                    [payload.currency]: payload.balance\r\n                },\r\n                loading: false\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n}","import { GET_MARKET } from '../actions/types';\r\n\r\nconst initialState = {\r\n    prices: {\r\n        BTC: null,\r\n        ETH: null\r\n    },\r\n    loading: true\r\n}\r\n\r\nexport default function (state = initialState, action) {\r\n    const {type, payload} = action;\r\n\r\n    switch (type) {\r\n        case GET_MARKET:\r\n            return {\r\n                prices: {\r\n                    BTC: payload[0].data.prices,\r\n                    ETH: payload[1].data.prices\r\n                },\r\n                loading: false\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n}","import { combineReducers } from 'redux';\r\nimport quotation from './quotation';\r\nimport balance from './balance';\r\nimport market from './market';\r\n\r\nexport default combineReducers({\r\n    quotation,\r\n    balance,\r\n    market\r\n});","import { createStore, applyMiddleware } from 'redux';\r\nimport { composeWithDevTools } from 'redux-devtools-extension';\r\nimport thunk from 'redux-thunk';\r\nimport rootReducer from './reducers';\r\n\r\nconst initialState = {};\r\n\r\nconst middleware = [thunk];\r\n\r\nconst store = createStore(\r\n    rootReducer,\r\n    initialState,\r\n    composeWithDevTools(applyMiddleware(...middleware))\r\n)\r\n\r\nexport default store;\r\n\r\n","import { GET_MARKET } from './types';\r\nimport axios from 'axios';\r\n\r\nconst currencies = ['bitcoin', 'ethereum'];\r\n\r\nexport const getMarket = () => async dispatch => {\r\n    try {\r\n        let promiseArray = [];\r\n        currencies.forEach(curr => {\r\n            promiseArray.push(axios.get(`https://api.coingecko.com/api/v3/coins/${curr}/market_chart?vs_currency=usd&days=14&interval=daily`));\r\n        });\r\n        Promise.all(promiseArray).then(values => {\r\n            dispatch({\r\n                type: GET_MARKET,\r\n                payload: values\r\n            })\r\n        })\r\n    } catch (err) {\r\n        console.log('NETWORK_ERROR');\r\n    }\r\n}\r\n","import React, { useEffect } from 'react';\r\nimport './App.css';\r\nimport Navbar from './components/layout/Navbar';\r\nimport Footer from './components/layout/Footer'\r\nimport Portfolio from './components/portfolio/Portfolio';\r\nimport Converter from './components/converter/Converter';\r\nimport {HashRouter as Router, Switch, Route} from 'react-router-dom';\r\n\r\n// Redux\r\nimport { Provider } from 'react-redux';\r\nimport store from './store';\r\nimport { getQuotations } from './actions/quotation';\r\nimport { getMarket } from './actions/market';\r\n\r\n\r\nconst App = () => {\r\n    useEffect(() => {\r\n        store.dispatch(getQuotations());\r\n        store.dispatch(getMarket());\r\n    }, [])\r\n\r\n    return (\r\n        <Provider store={store}>\r\n            <Router basename='/'>\r\n                <div>\r\n                    <Navbar/>\r\n                    <Switch>\r\n                        <Route exact path='/' component={Converter}/>\r\n                        <Route exact path='/portfolio' component={Portfolio}/>\r\n                    </Switch>\r\n                </div>\r\n                <Footer />\r\n            </Router>\r\n        </Provider>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","import { GET_QUOTATIONS } from './types';\r\nimport axios from 'axios';\r\n\r\nexport const getQuotations = () => async dispatch => {\r\n    try {\r\n        const res = await axios.get('https://api.coingecko.com/api/v3/simple/price?ids=bitcoin,Ethereum&vs_currencies=usd');\r\n        dispatch({\r\n            type: GET_QUOTATIONS,\r\n            payload: res.data\r\n        })\r\n    } catch (err) {\r\n        console.log('NETWORK_ERROR');\r\n    }\r\n}","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\n"],"sourceRoot":""}